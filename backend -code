//setting up express app
mkdir backend
cd backend
npm init -y
npm install express mongoose cors body-parser
//transactional.js
const mongoose = require('mongoose');

const transactionSchema = new mongoose.Schema({
  description: String,
  amount: Number,
  type: { type: String, enum: ['income', 'expense'] },
  date: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Transaction', transactionSchema);
const express = require('express');
const Transaction = require('../models/Transaction');
const router = express.Router();

// Get all transactions
router.get('/', async (req, res) => {
  try {
    const transactions = await Transaction.find();
    res.json(transactions);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// Add a transaction
router.post('/', async (req, res) => {
  const { description, amount, type } = req.body;

  try {
    const newTransaction = new Transaction({ description, amount, type });
    const savedTransaction = await newTransaction.save();
    res.json(savedTransaction);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

module.exports = router;
//server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const transactionRoutes = require('./routes/transaction');

const app = express();
app.use(cors());
app.use(bodyParser.json());

mongoose.connect('mongodb://localhost:27017/finance-tracker', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

app.use('/api/transactions', transactionRoutes);

const PORT = 5000;
app.listen(PORT, () => {
  console.log(Server is running on port ${PORT});
});
